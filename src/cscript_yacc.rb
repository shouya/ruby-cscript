#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'
class CScriptParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     2,    18,    19,    16,    17,    20,    18,    19,     9,    18,
    19,     4,     5,     8,    10,    21,    15,    14,    18,    19,
    16,    17,    20,    18,    19,    16,    17,    20,    25,     9,
    26,    32,     4,     5,     8,    10,    38,   nil,    14,     9,
    40,   nil,     4,     5,     8,    10,   nil,   nil,    14,     9,
    44,   nil,     4,     5,     8,    10,   nil,     9,    14,    33,
     4,     5,     8,    10,   nil,     9,    14,    41,     4,     5,
     8,    10,     9,   nil,    14,     4,     5,     8,    10,     9,
   nil,    14,     4,     5,     8,    10,     9,   nil,   nil,     4,
     5,     8,    10,     9,   nil,   nil,     4,     5,     8,    10,
     9,   nil,   nil,     4,     5,     8,    10,     9,   nil,   nil,
     4,     5,     8,    10,     9,   nil,   nil,     4,     5,     8,
    10,     9,   nil,   nil,     4,     5,     8,    10,     9,   nil,
   nil,     4,     5,     8,    10,    18,    19,    16,    17,    20,
    18,    19,    16,    17,    20 ]

racc_action_check = [
     1,     7,     7,     7,     7,     7,    28,    28,     1,    27,
    27,     1,     1,     1,     1,     7,     2,     1,    23,    23,
    23,    23,    23,    35,    35,    35,    35,    35,    13,    37,
    14,    23,    37,    37,    37,    37,    35,   nil,    37,    43,
    37,   nil,    43,    43,    43,    43,   nil,   nil,    43,    25,
    43,   nil,    25,    25,    25,    25,   nil,    38,    25,    25,
    38,    38,    38,    38,   nil,    33,    38,    38,    33,    33,
    33,    33,    41,   nil,    33,    41,    41,    41,    41,    26,
   nil,    41,    26,    26,    26,    26,    20,   nil,   nil,    20,
    20,    20,    20,    19,   nil,   nil,    19,    19,    19,    19,
    10,   nil,   nil,    10,    10,    10,    10,    18,   nil,   nil,
    18,    18,    18,    18,    17,   nil,   nil,    17,    17,    17,
    17,    16,   nil,   nil,    16,    16,    16,    16,     9,   nil,
   nil,     9,     9,     9,     9,    31,    31,    31,    31,    31,
    22,    22,    22,    22,    22 ]

racc_action_pointer = [
   nil,     0,    16,   nil,   nil,   nil,   nil,    -1,   nil,   120,
    92,   nil,   nil,    19,    16,   nil,   113,   106,    99,    85,
    78,   nil,   138,    16,   nil,    41,    71,     7,     4,   nil,
   nil,   133,   nil,    57,   nil,    21,   nil,    21,    49,   nil,
   nil,    64,   nil,    31,   nil ]

racc_action_default = [
    -1,   -26,   -26,    -2,    -3,    -4,    -6,   -26,   -11,   -26,
   -26,   -14,   -19,   -20,   -26,    45,   -26,   -26,   -26,   -26,
   -26,   -18,   -12,   -26,   -21,   -26,   -26,    -7,    -8,    -9,
   -10,   -15,   -13,   -26,   -25,   -26,   -16,   -26,   -26,   -17,
   -24,   -26,   -23,   -26,   -22 ]

racc_goto_table = [
     3,    22,    23,     1,    24,    37,   nil,   nil,    27,    28,
    29,    30,    31,    43,   nil,   nil,   nil,   nil,    35,   nil,
   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,    42,   nil,   nil,
   nil,   nil,    39 ]

racc_goto_check = [
     2,     5,     5,     1,    10,     7,   nil,   nil,     5,     5,
     5,     5,     5,     7,   nil,   nil,   nil,   nil,     5,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,     2,   nil,   nil,
   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     3,    -1,   nil,   nil,    -8,   nil,   -28,   nil,   nil,
    -9 ]

racc_goto_default = [
   nil,   nil,    36,     6,   nil,     7,    11,   nil,    12,    13,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 21, :_reduce_1,
  2, 21, :_reduce_2,
  1, 23, :_reduce_3,
  1, 23, :_reduce_4,
  1, 24, :_reduce_5,
  1, 25, :_reduce_6,
  3, 25, :_reduce_7,
  3, 25, :_reduce_8,
  3, 25, :_reduce_9,
  3, 25, :_reduce_10,
  1, 25, :_reduce_11,
  2, 25, :_reduce_12,
  3, 25, :_reduce_13,
  1, 25, :_reduce_14,
  3, 26, :_reduce_15,
  1, 27, :_reduce_16,
  2, 27, :_reduce_17,
  2, 22, :_reduce_18,
  1, 22, :_reduce_19,
  1, 28, :_reduce_20,
  2, 28, :_reduce_21,
  7, 29, :_reduce_22,
  5, 29, :_reduce_23,
  4, 30, :_reduce_24,
  2, 30, :_reduce_25 ]

racc_reduce_n = 26

racc_shift_n = 45

racc_token_table = {
  false => 0,
  :error => 1,
  "*" => 2,
  "/" => 3,
  "+" => 4,
  "-" => 5,
  "=" => 6,
  :noassoc => 7,
  "%" => 8,
  :ELSE => 9,
  :LOWER_THAN_ELSE => 10,
  :STRING => 11,
  :INTEGER => 12,
  :NAME => 13,
  "(" => 14,
  ")" => 15,
  ";" => 16,
  :IF => 17,
  "{" => 18,
  "}" => 19 }

racc_nt_base = 20

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"=\"",
  "noassoc",
  "\"%\"",
  "ELSE",
  "LOWER_THAN_ELSE",
  "STRING",
  "INTEGER",
  "NAME",
  "\"(\"",
  "\")\"",
  "\";\"",
  "IF",
  "\"{\"",
  "\"}\"",
  "$start",
  "main_rule",
  "stmt",
  "literal",
  "name",
  "expr",
  "assignment",
  "stmt_lst",
  "x_if",
  "if_part",
  "else_part" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'cscript_yacc.y', 24)
  def _reduce_1(val, _values, result)
     return mkCtrl(:EMPTY_STMT) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 25)
  def _reduce_2(val, _values, result)
     return val[0].append val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 28)
  def _reduce_3(val, _values, result)
     return mkVal(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 29)
  def _reduce_4(val, _values, result)
     return mkVal(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 32)
  def _reduce_5(val, _values, result)
     return mkVal(val[0], :NAME) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 36)
  def _reduce_6(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 37)
  def _reduce_7(val, _values, result)
     return mkCtrl(:PLUS, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 38)
  def _reduce_8(val, _values, result)
     return mkCtrl(:MINUS, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 39)
  def _reduce_9(val, _values, result)
     return mkCtrl(:MULTIPLY, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 40)
  def _reduce_10(val, _values, result)
     return mkCtrl(:DIVIDE, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 41)
  def _reduce_11(val, _values, result)
     return mkVal(val[0], :NAME) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 42)
  def _reduce_12(val, _values, result)
     return mkCtrl(:PRINT, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 43)
  def _reduce_13(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 44)
  def _reduce_14(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 48)
  def _reduce_15(val, _values, result)
            return mkCtrl(:ASIGN, val[0], val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 52)
  def _reduce_16(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 53)
  def _reduce_17(val, _values, result)
     return val[0].append val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 56)
  def _reduce_18(val, _values, result)
     return mkCtrl(:STMT, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 57)
  def _reduce_19(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 60)
  def _reduce_20(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 61)
  def _reduce_21(val, _values, result)
     return val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 65)
  def _reduce_22(val, _values, result)
                return mkCtrl(:IF_PART, val[2], val[5])
        
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 68)
  def _reduce_23(val, _values, result)
                return mkCtrl(:IF_PART, val[2], val[4])
        
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 73)
  def _reduce_24(val, _values, result)
                return mkCtrl(:ELSE_PART, val[2])
        
    result
  end
.,.,

module_eval(<<'.,.,', 'cscript_yacc.y', 76)
  def _reduce_25(val, _values, result)
                return mkCtrl(:ELSE_PART, val[1])
        
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class CScriptParser
