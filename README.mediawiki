== Background ==
This plan started at [[Apr 7, 2012]] night, by the same reason, as I found the old version is hardly to continue and I don't want to drop the project off.

It could say the first mind started at [[Mar 24, 2012]], by the time I start to consider change a programming language to write the code, and first I considered about python, which shall be very welcome by me at that time, however, the project was delayed and delayed and started lately. At the new time I was learning [[Ruby]], so I started the project via [[Ruby]] then.

== Basic Modules ==
In this version, the project will be separated to two main modules:
* [[#Parser]]
* [[#Executor]]
Unlike [[cscript3]], I'm using Ruby, which is dynamic so I can use many extra features and manage the types conveniently. Hence, I decide to simplify the parser and executor, which means, the parser module and the executor module will share the same set of symbols of types.

And the '''Generator''' part has been given up, as it is not really necessary for Ruby more.

== Technique ==
This version I have rewritten the lexer and parser, as I am going to add syntax rules continuously, as under Ruby they seems more easy to control than C.

First, the parser:
* lexer is written by myself
* syntax parser will be generated by racc

== Modules Structure ==
'''N.B. The prefix 'CScript' is abbreviated.'''

<pre>
class Parser
  module Scanner

  class CSValue < class CSTreeNode
  class CSCtrl < class CSTreeNode

  class Executor
    module Common
      module InternalExecutor
        module InternalEvaluator
</pre>


== Stages ==
Same as [[cscript3]], the project still separates to many stages to complete it, as it is a effective way to implement something.

However, the stage standard does not completely same as cscript3, so, for more details, see below.

{{DONE|Currently I'm doing the first stage.}}

{{DONE|I'll now delightedly announce that ''the first stage has been satisfactorily succeeded'' and mark the previous line done! What I'll do later is the next stage, enjoy going on. ([[User:ShouYa|Shou Ya]] 04:04, 14 April 2012 (CST))|date=morning, 17 April, 2012}}

{{DONE|The third stage.}}

{{DOING|The fourth :)}}

=== First Stage ===
Test whether basic program and design are flexible. Do some very basic tasks.

Functions opened:
* {{DONE|variable declaration and assignment}}
* {{DONE|print integer statement}}
* {{DONE|if statement for condition branching}}
* {{DONE|while loop}}
* {{DONE|basic arithmetic operations like '+/-/*/\/'}}

Extra Result:
* trace all origin place where the symbol is from in the syntax tree
* and more!

=== Second Stage ===
Purpose: add string support

Functions opened:
* {{DELAY|convert/cast between strings & integers each others|reason=it depends on function calling or stuff|date=03:42, 18 April 2012 (CST)}}
* {{DONE|output strings}}
* {{DONE|determine whether a string is empty and set to false}}
* {{DONE|implement the operations '+', '*' to string}}

=== Third Stage ===
Purpose: add functions calling and defining support.

Functions opened:
* {{DOING|a non-completed internal function library}}
* {{DONE|custom function definition|date=04:54, 19 April 2012 (CST)}}
* {{DONE|custom function calling|date=04:54, 19 April 2012 (CST)}}
* {{DELAY|custom function declaration|reason=it needs external file support, so it should be delayed to the next stage|date=04:54, 19 April 2012 (CST)}}

=== Fourth Stage ===
Purpose: add multi-file program support

Functions opened:
* enable C preprocessor `cpp`
* header/source code separation support
* specific declaration/definition
* support binary libraries execution and serialization, etc.

=== Fifth Stage ===
Don't be too impatient, I believe the things above is already able to give me a huge work.

== To Do ==
* <s>print each symbols' position in source file</s>
* {{TODO|jumping control in loop structure (refer to: ''rewrite runtime class'' ''#3'')}}
* {{DONE|remember the place where the variable first defined and most recent reassigned.}}
* {{DONE|rewrite runtime class}}
*# it should be a singleton common class (abbr. <code>SCS</code>) for whole the program
*# variable container should use a separated class
*# the SCS should has a pointer that points currently executing statement, and a pointer to currently evaluating expression and thus it will enhance the controllability of program.
*# the SCS should be able to XXXX
* {{DONE|write a `value class`, for just store cscript variant values.}}
*# it should respond to `is_false` and `is_true` instead of what the <code>CscriptCommon</code> currently doing.
*# storage known value type only, and warning for the unknown ones.
* {{TODO|respond to `<code>local</code>` and `<code>global</code>` to define variable explicitly.}}

== Words At Last ==
Enjoy Ruby.

